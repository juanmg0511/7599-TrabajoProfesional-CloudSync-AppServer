# CloudSync - App Server
# Flask + MongoDB - on Gunicorn
# docker-compose.yml

version: '3'
services:

  flask:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app-server-flask
    restart: unless-stopped
    environment:
      # GUNICORN_LOG_LEVEL - The granularity of log output
      # A string of "debug", "info", "warning", "error", "critical"
      GUNICORN_LOG_LEVEL: "debug"
      # Setear la cantidad de workers a utilizar por Gunicorn
      # https://devcenter.heroku.com/articles/python-gunicorn
      GUNICORN_WORKERS: 4
      # Setear en True or False, solo aplica para correr desde Python (o sea nunca)
      APP_DEBUG: "True"
      APP_PORT: 8000
      # Setear el entorno en que corre el server
      # Puede ser "DEV", "QA", "PROD"
      APP_ENV: "DEV"
      # Longitud maxima para nombres de usuarios
      USERNAME_MAX_LENGTH: 64
      # Tamanio maximo de pagina para la devolucion de resultados
      PAGE_MAX_SIZE: 100      
      # Datos para conectarse al AuthServer
      API_AUTH_CLIENT_ID: "ef00a570-7cfc-4638-8cad-d085fd98b6e3"
      API_AUTH_CLIENT_URL: "http://127.0.0.1:81"
      API_AUTH_CLIENT_PATH: "api"
      API_AUTH_CLIENT_VERSION: "v1"
      # Datos para conectare a la DB
      MONGODB_DATABASE: app-server-db
      MONGODB_USERNAME: appserveruser
      MONGODB_PASSWORD: 123456
      MONGODB_HOSTNAME: app-server-mongodb
      MONGODB_SSL: "false"
      MONGODB_REPLICA_SET: "None"
      MONGODB_AUTH_SOURCE: "None"
    volumes:
       - appserverlogs:/home/appuser/logs
       - ".:/home/appuser/" 
    ports:
       - "80:8000"
    depends_on:
      - mongodb
    networks:
      - app-frontend
      - app-backend

  mongodb:
    image: mongo:5.0.9
    container_name: app-server-mongodb
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: sa
      MONGO_INITDB_ROOT_PASSWORD: 123456
      MONGO_NON_ROOT_USERNAME: appserveruser
      MONGO_NON_ROOT_PASSWORD: 123456
      MONGODB_DATABASE: app-server-db
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - mongodbdata:/data/db
      # Si el volumen de arriba no existe, corremos el script mongoinit.sh para agregar el usuario
      # de aplicacion e inicializar la base de datos
      - "./mongoinit/:/docker-entrypoint-initdb.d/"
    # Exponemos el puerto para administrar la DB directamente, durante el desarrollo
    # ports:
       # - "27017:27017"
    networks:
      - app-backend

networks:
  app-frontend:
    driver: bridge
  app-backend:
    driver: bridge

volumes:
  appserverlogs:
    driver: local
  mongodbdata:
    driver: local
